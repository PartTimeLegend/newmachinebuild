name: CICD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron:  '0 0 * * *'
  workflow_dispatch:
env:
  ARTIFACT_NAME: SignedScript
  
jobs:
  powershell:
    name: Powershell
    strategy:
      matrix:
        os: [windows-2022, windows-2019, windows-2016, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Run script
      run: .\NewMachineSetup.ps1
      shell: powershell
      
    - name: Import code signing certificate
      shell: powershell
      run: |
        $pfxCertFilePath = Join-Path -Path $PSScriptRoot -ChildPath "CodeSigningCertificate.pfx"
        Set-Content -Value $([System.Convert]::FromBase64String($env:BASE64_PFX)) -Path $pfxCertFilePath -Encoding Byte
        $codeSigningCert = Import-PfxCertificate -FilePath $pfxCertFilePath -Password $($env:PFX_PASSWORD | ConvertTo-SecureString -AsPlainText -Force) -CertStoreLocation Cert:\CurrentUser\My
      env:
        BASE64_PFX: ${{ secrets.BASE64_PFX }}
        PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}
    - name: Check out repository
      uses: actions/checkout@v2
    - name: Sign PowerShell scripts
      shell: powershell
      run: |
        # remove git dir from checked out repo
        Get-ChildItem -Path "." -Filter ".git*" -Force | ForEach-Object {Remove-Item -Path $_.FullName -Recurse -Force}
        $scripts = Get-ChildItem -Path . -Filter "*.ps1" -Recurse -ErrorAction Stop
        # load cert
        $codeSigningCert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | Select-Object -First 1
        foreach ($script in $scripts) 
        {
          try 
          {
            $scriptContent = Get-Content -Path $script.FullName
            Write-Output "Signing script `"$($script.Name)`" with certificate `"$($codeSigningCert.Thumbprint)`""
            # sign script
            $null = Set-AuthenticodeSignature -Certificate $codeSigningCert -FilePath $script.FullName -TimestampServer "http://timestamp.comodoca.com/rfc3161"
          }
          catch 
          {
            Write-Error $_
          }
        }
    - name: Publish artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACT_NAME }}-${{ matrix.os }}
        path: .
  docker:
    name: Docker
    strategy:
      matrix:
        os: [windows-2019]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF##*/})"
      id: extract_branch  
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag parttimelegend/newmachinebuild:latest --tag parttimelegend/newmachinebuild:$(date +%s) --tag parttimelegend/newmachinebuild:${{ github.sha }} --no-cache
    - name: Docker image list
      run: docker images
    - name: Docker Login
      run: docker login --username ${{secrets.DOCKERHUB_USERNAME}}  --password ${{secrets.DOCKERHUB_TOKEN}} 
      if: steps.extract_branch.outputs.branch == 'master'
    - name: Docker Push
      run: docker push parttimelegend/newmachinebuild
      if: steps.extract_branch.outputs.branch == 'master'
  codacy-security-scan:
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v2
      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@1.1.0
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647
      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
  shiftleft-security-scan:
    name: ShiftLeft Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Perform Scan
        uses: ShiftLeftSecurity/scan-action@master
        env:
          WORKSPACE: ""
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SCAN_AUTO_BUILD: true
        with:
          output: reports
          # Scan auto-detects the languages in your project. To override uncomment the below variable and set the type
          # type: credscan,java
          # type: python
      - name: Upload report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: reports
  psscriptanalyzer:
    name: PSScriptAnalyzer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Run PSScriptAnalyzer
        uses: microsoft/psscriptanalyzer-action@2044ae068e37d0161fa2127de04c19633882f061
        with:
          # Check https://github.com/microsoft/action-psscriptanalyzer for more info about the options.
          # The below set up runs PSScriptAnalyzer to your entire repository and runs some basic security rules.
          path: .\
          recurse: true 
          output: results.sarif
      
      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: results.sarif
  tag:
    name: Tag Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Bump version and push tag
      uses: anothrNick/github-tag-action@1.26.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
    
